{"id":"../node_modules/katex/src/Lexer.js","dependencies":[{"name":"/Users/untone/Sites/loyalitycorp-test/package.json","includedInParent":true,"mtime":1557582570376},{"name":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/package.json","includedInParent":true,"mtime":1557582566587},{"name":"match-at","loc":{"line":14,"column":22},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Lexer.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/match-at/lib/matchAt.js"},{"name":"./ParseError","loc":{"line":16,"column":25},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Lexer.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/ParseError.js"}],"generated":{"js":"/**\n * The Lexer class handles tokenizing the input in various ways. Since our\n * parser expects us to be able to backtrack, the lexer allows lexing from any\n * given starting point.\n *\n * Its main exposed function is the `lex` function, which takes a position to\n * lex from and a type of token to lex. It defers to the appropriate `_innerLex`\n * function.\n *\n * The various `_innerLex` functions perform the actual lexing of different\n * kinds.\n */\n\nvar matchAt = require(\"match-at\");\n\nvar ParseError = require(\"./ParseError\");\n\n// The main lexer class\nfunction Lexer(input) {\n    this._input = input;\n}\n\n// The resulting token returned from `lex`.\nfunction Token(text, data, position) {\n    this.text = text;\n    this.data = data;\n    this.position = position;\n}\n\n/* The following tokenRegex\n * - matches typical whitespace (but not NBSP etc.) using its first group\n * - matches symbol combinations which result in a single output character\n * - does not match any control character \\x00-\\x1f except whitespace\n * - does not match a bare backslash\n * - matches any ASCII character except those just mentioned\n * - does not match the BMP private use area \\uE000-\\uF8FF\n * - does not match bare surrogate code units\n * - matches any BMP character except for those just described\n * - matches any valid Unicode surrogate pair\n * - matches a backslash followed by one or more letters\n * - matches a backslash followed by any BMP character, including newline\n * Just because the Lexer matches something doesn't mean it's valid input:\n * If there is no matching function or symbol definition, the Parser will\n * still reject the input.\n */\nvar tokenRegex = new RegExp(\n    \"([ \\r\\n\\t]+)|(\" +                                // whitespace\n    \"---?\" +                                          // special combinations\n    \"|[!-\\\\[\\\\]-\\u2027\\u202A-\\uD7FF\\uF900-\\uFFFF]\" +  // single codepoint\n    \"|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\" +               // surrogate pair\n    \"|\\\\\\\\(?:[a-zA-Z]+|[^\\uD800-\\uDFFF])\" +           // function name\n    \")\"\n);\n\nvar whitespaceRegex = /\\s*/;\n\n/**\n * This function lexes a single normal token. It takes a position and\n * whether it should completely ignore whitespace or not.\n */\nLexer.prototype._innerLex = function(pos, ignoreWhitespace) {\n    var input = this._input;\n    if (pos === input.length) {\n        return new Token(\"EOF\", null, pos);\n    }\n    var match = matchAt(tokenRegex, input, pos);\n    if (match === null) {\n        throw new ParseError(\n            \"Unexpected character: '\" + input[pos] + \"'\",\n            this, pos);\n    } else if (match[2]) { // matched non-whitespace\n        return new Token(match[2], null, pos + match[2].length);\n    } else if (ignoreWhitespace) {\n        return this._innerLex(pos + match[1].length, true);\n    } else { // concatenate whitespace to a single space\n        return new Token(\" \", null, pos + match[1].length);\n    }\n};\n\n// A regex to match a CSS color (like #ffffff or BlueViolet)\nvar cssColor = /#[a-z0-9]+|[a-z]+/i;\n\n/**\n * This function lexes a CSS color.\n */\nLexer.prototype._innerLexColor = function(pos) {\n    var input = this._input;\n\n    // Ignore whitespace\n    var whitespace = matchAt(whitespaceRegex, input, pos)[0];\n    pos += whitespace.length;\n\n    var match;\n    if ((match = matchAt(cssColor, input, pos))) {\n        // If we look like a color, return a color\n        return new Token(match[0], null, pos + match[0].length);\n    } else {\n        throw new ParseError(\"Invalid color\", this, pos);\n    }\n};\n\n// A regex to match a dimension. Dimensions look like\n// \"1.2em\" or \".4pt\" or \"1 ex\"\nvar sizeRegex = /(-?)\\s*(\\d+(?:\\.\\d*)?|\\.\\d+)\\s*([a-z]{2})/;\n\n/**\n * This function lexes a dimension.\n */\nLexer.prototype._innerLexSize = function(pos) {\n    var input = this._input;\n\n    // Ignore whitespace\n    var whitespace = matchAt(whitespaceRegex, input, pos)[0];\n    pos += whitespace.length;\n\n    var match;\n    if ((match = matchAt(sizeRegex, input, pos))) {\n        var unit = match[3];\n        // We only currently handle \"em\" and \"ex\" units\n        if (unit !== \"em\" && unit !== \"ex\") {\n            throw new ParseError(\"Invalid unit: '\" + unit + \"'\", this, pos);\n        }\n        return new Token(match[0], {\n            number: +(match[1] + match[2]),\n            unit: unit,\n        }, pos + match[0].length);\n    }\n\n    throw new ParseError(\"Invalid size\", this, pos);\n};\n\n/**\n * This function lexes a string of whitespace.\n */\nLexer.prototype._innerLexWhitespace = function(pos) {\n    var input = this._input;\n\n    var whitespace = matchAt(whitespaceRegex, input, pos)[0];\n    pos += whitespace.length;\n\n    return new Token(whitespace[0], null, pos);\n};\n\n/**\n * This function lexes a single token starting at `pos` and of the given mode.\n * Based on the mode, we defer to one of the `_innerLex` functions.\n */\nLexer.prototype.lex = function(pos, mode) {\n    if (mode === \"math\") {\n        return this._innerLex(pos, true);\n    } else if (mode === \"text\") {\n        return this._innerLex(pos, false);\n    } else if (mode === \"color\") {\n        return this._innerLexColor(pos);\n    } else if (mode === \"size\") {\n        return this._innerLexSize(pos);\n    } else if (mode === \"whitespace\") {\n        return this._innerLexWhitespace(pos);\n    }\n};\n\nmodule.exports = Lexer;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/katex/src/Lexer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/katex/src/Lexer.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}}],"sources":{"../node_modules/katex/src/Lexer.js":"/**\n * The Lexer class handles tokenizing the input in various ways. Since our\n * parser expects us to be able to backtrack, the lexer allows lexing from any\n * given starting point.\n *\n * Its main exposed function is the `lex` function, which takes a position to\n * lex from and a type of token to lex. It defers to the appropriate `_innerLex`\n * function.\n *\n * The various `_innerLex` functions perform the actual lexing of different\n * kinds.\n */\n\nvar matchAt = require(\"match-at\");\n\nvar ParseError = require(\"./ParseError\");\n\n// The main lexer class\nfunction Lexer(input) {\n    this._input = input;\n}\n\n// The resulting token returned from `lex`.\nfunction Token(text, data, position) {\n    this.text = text;\n    this.data = data;\n    this.position = position;\n}\n\n/* The following tokenRegex\n * - matches typical whitespace (but not NBSP etc.) using its first group\n * - matches symbol combinations which result in a single output character\n * - does not match any control character \\x00-\\x1f except whitespace\n * - does not match a bare backslash\n * - matches any ASCII character except those just mentioned\n * - does not match the BMP private use area \\uE000-\\uF8FF\n * - does not match bare surrogate code units\n * - matches any BMP character except for those just described\n * - matches any valid Unicode surrogate pair\n * - matches a backslash followed by one or more letters\n * - matches a backslash followed by any BMP character, including newline\n * Just because the Lexer matches something doesn't mean it's valid input:\n * If there is no matching function or symbol definition, the Parser will\n * still reject the input.\n */\nvar tokenRegex = new RegExp(\n    \"([ \\r\\n\\t]+)|(\" +                                // whitespace\n    \"---?\" +                                          // special combinations\n    \"|[!-\\\\[\\\\]-\\u2027\\u202A-\\uD7FF\\uF900-\\uFFFF]\" +  // single codepoint\n    \"|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\" +               // surrogate pair\n    \"|\\\\\\\\(?:[a-zA-Z]+|[^\\uD800-\\uDFFF])\" +           // function name\n    \")\"\n);\n\nvar whitespaceRegex = /\\s*/;\n\n/**\n * This function lexes a single normal token. It takes a position and\n * whether it should completely ignore whitespace or not.\n */\nLexer.prototype._innerLex = function(pos, ignoreWhitespace) {\n    var input = this._input;\n    if (pos === input.length) {\n        return new Token(\"EOF\", null, pos);\n    }\n    var match = matchAt(tokenRegex, input, pos);\n    if (match === null) {\n        throw new ParseError(\n            \"Unexpected character: '\" + input[pos] + \"'\",\n            this, pos);\n    } else if (match[2]) { // matched non-whitespace\n        return new Token(match[2], null, pos + match[2].length);\n    } else if (ignoreWhitespace) {\n        return this._innerLex(pos + match[1].length, true);\n    } else { // concatenate whitespace to a single space\n        return new Token(\" \", null, pos + match[1].length);\n    }\n};\n\n// A regex to match a CSS color (like #ffffff or BlueViolet)\nvar cssColor = /#[a-z0-9]+|[a-z]+/i;\n\n/**\n * This function lexes a CSS color.\n */\nLexer.prototype._innerLexColor = function(pos) {\n    var input = this._input;\n\n    // Ignore whitespace\n    var whitespace = matchAt(whitespaceRegex, input, pos)[0];\n    pos += whitespace.length;\n\n    var match;\n    if ((match = matchAt(cssColor, input, pos))) {\n        // If we look like a color, return a color\n        return new Token(match[0], null, pos + match[0].length);\n    } else {\n        throw new ParseError(\"Invalid color\", this, pos);\n    }\n};\n\n// A regex to match a dimension. Dimensions look like\n// \"1.2em\" or \".4pt\" or \"1 ex\"\nvar sizeRegex = /(-?)\\s*(\\d+(?:\\.\\d*)?|\\.\\d+)\\s*([a-z]{2})/;\n\n/**\n * This function lexes a dimension.\n */\nLexer.prototype._innerLexSize = function(pos) {\n    var input = this._input;\n\n    // Ignore whitespace\n    var whitespace = matchAt(whitespaceRegex, input, pos)[0];\n    pos += whitespace.length;\n\n    var match;\n    if ((match = matchAt(sizeRegex, input, pos))) {\n        var unit = match[3];\n        // We only currently handle \"em\" and \"ex\" units\n        if (unit !== \"em\" && unit !== \"ex\") {\n            throw new ParseError(\"Invalid unit: '\" + unit + \"'\", this, pos);\n        }\n        return new Token(match[0], {\n            number: +(match[1] + match[2]),\n            unit: unit,\n        }, pos + match[0].length);\n    }\n\n    throw new ParseError(\"Invalid size\", this, pos);\n};\n\n/**\n * This function lexes a string of whitespace.\n */\nLexer.prototype._innerLexWhitespace = function(pos) {\n    var input = this._input;\n\n    var whitespace = matchAt(whitespaceRegex, input, pos)[0];\n    pos += whitespace.length;\n\n    return new Token(whitespace[0], null, pos);\n};\n\n/**\n * This function lexes a single token starting at `pos` and of the given mode.\n * Based on the mode, we defer to one of the `_innerLex` functions.\n */\nLexer.prototype.lex = function(pos, mode) {\n    if (mode === \"math\") {\n        return this._innerLex(pos, true);\n    } else if (mode === \"text\") {\n        return this._innerLex(pos, false);\n    } else if (mode === \"color\") {\n        return this._innerLexColor(pos);\n    } else if (mode === \"size\") {\n        return this._innerLexSize(pos);\n    } else if (mode === \"whitespace\") {\n        return this._innerLexWhitespace(pos);\n    }\n};\n\nmodule.exports = Lexer;\n"},"lineCount":163}},"error":null,"hash":"27febce43956e679f9272b0eb181bdf1","cacheData":{"env":{}}}