{"id":"../node_modules/katex/src/Parser.js","dependencies":[{"name":"/Users/untone/Sites/loyalitycorp-test/package.json","includedInParent":true,"mtime":1557582570376},{"name":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/package.json","includedInParent":true,"mtime":1557582566587},{"name":"./functions","loc":{"line":2,"column":24},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Parser.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/functions.js"},{"name":"./environments","loc":{"line":3,"column":27},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Parser.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/environments.js"},{"name":"./Lexer","loc":{"line":4,"column":20},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Parser.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Lexer.js"},{"name":"./symbols","loc":{"line":5,"column":22},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Parser.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/symbols.js"},{"name":"./utils","loc":{"line":6,"column":20},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Parser.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/utils.js"},{"name":"./parseData","loc":{"line":8,"column":24},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Parser.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/parseData.js"},{"name":"./ParseError","loc":{"line":9,"column":25},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Parser.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/ParseError.js"}],"generated":{"js":"/* eslint no-constant-condition:0 */\nvar functions = require(\"./functions\");\nvar environments = require(\"./environments\");\nvar Lexer = require(\"./Lexer\");\nvar symbols = require(\"./symbols\");\nvar utils = require(\"./utils\");\n\nvar parseData = require(\"./parseData\");\nvar ParseError = require(\"./ParseError\");\n\n/**\n * This file contains the parser used to parse out a TeX expression from the\n * input. Since TeX isn't context-free, standard parsers don't work particularly\n * well.\n *\n * The strategy of this parser is as such:\n *\n * The main functions (the `.parse...` ones) take a position in the current\n * parse string to parse tokens from. The lexer (found in Lexer.js, stored at\n * this.lexer) also supports pulling out tokens at arbitrary places. When\n * individual tokens are needed at a position, the lexer is called to pull out a\n * token, which is then used.\n *\n * The parser has a property called \"mode\" indicating the mode that\n * the parser is currently in. Currently it has to be one of \"math\" or\n * \"text\", which denotes whether the current environment is a math-y\n * one or a text-y one (e.g. inside \\text). Currently, this serves to\n * limit the functions which can be used in text mode.\n *\n * The main functions then return an object which contains the useful data that\n * was parsed at its given point, and a new position at the end of the parsed\n * data. The main functions can call each other and continue the parsing by\n * using the returned position as a new starting point.\n *\n * There are also extra `.handle...` functions, which pull out some reused\n * functionality into self-contained functions.\n *\n * The earlier functions return ParseNodes.\n * The later functions (which are called deeper in the parse) sometimes return\n * ParseFuncOrArgument, which contain a ParseNode as well as some data about\n * whether the parsed object is a function which is missing some arguments, or a\n * standalone object which can be used as an argument to another function.\n */\n\n/**\n * Main Parser class\n */\nfunction Parser(input, settings) {\n    // Make a new lexer\n    this.lexer = new Lexer(input);\n    // Store the settings for use in parsing\n    this.settings = settings;\n}\n\nvar ParseNode = parseData.ParseNode;\n\n/**\n * An initial function (without its arguments), or an argument to a function.\n * The `result` argument should be a ParseNode.\n */\nfunction ParseFuncOrArgument(result, isFunction) {\n    this.result = result;\n    // Is this a function (i.e. is it something defined in functions.js)?\n    this.isFunction = isFunction;\n}\n\n/**\n * Checks a result to make sure it has the right type, and throws an\n * appropriate error otherwise.\n *\n * @param {boolean=} consume whether to consume the expected token,\n *                           defaults to true\n */\nParser.prototype.expect = function(text, consume) {\n    if (this.nextToken.text !== text) {\n        throw new ParseError(\n            \"Expected '\" + text + \"', got '\" + this.nextToken.text + \"'\",\n            this.lexer, this.nextToken.position\n        );\n    }\n    if (consume !== false) {\n        this.consume();\n    }\n};\n\n/**\n * Considers the current look ahead token as consumed,\n * and fetches the one after that as the new look ahead.\n */\nParser.prototype.consume = function() {\n    this.pos = this.nextToken.position;\n    this.nextToken = this.lexer.lex(this.pos, this.mode);\n};\n\n/**\n * Main parsing function, which parses an entire input.\n *\n * @return {?Array.<ParseNode>}\n */\nParser.prototype.parse = function() {\n    // Try to parse the input\n    this.mode = \"math\";\n    this.pos = 0;\n    this.nextToken = this.lexer.lex(this.pos, this.mode);\n    var parse = this.parseInput();\n    return parse;\n};\n\n/**\n * Parses an entire input tree.\n */\nParser.prototype.parseInput = function() {\n    // Parse an expression\n    var expression = this.parseExpression(false);\n    // If we succeeded, make sure there's an EOF at the end\n    this.expect(\"EOF\", false);\n    return expression;\n};\n\nvar endOfExpression = [\"}\", \"\\\\end\", \"\\\\right\", \"&\", \"\\\\\\\\\", \"\\\\cr\"];\n\n/**\n * Parses an \"expression\", which is a list of atoms.\n *\n * @param {boolean} breakOnInfix Should the parsing stop when we hit infix\n *                  nodes? This happens when functions have higher precendence\n *                  than infix nodes in implicit parses.\n *\n * @param {?string} breakOnToken The token that the expression should end with,\n *                  or `null` if something else should end the expression.\n *\n * @return {ParseNode}\n */\nParser.prototype.parseExpression = function(breakOnInfix, breakOnToken) {\n    var body = [];\n    // Keep adding atoms to the body until we can't parse any more atoms (either\n    // we reached the end, a }, or a \\right)\n    while (true) {\n        var lex = this.nextToken;\n        var pos = this.pos;\n        if (endOfExpression.indexOf(lex.text) !== -1) {\n            break;\n        }\n        if (breakOnToken && lex.text === breakOnToken) {\n            break;\n        }\n        var atom = this.parseAtom();\n        if (!atom) {\n            if (!this.settings.throwOnError && lex.text[0] === \"\\\\\") {\n                var errorNode = this.handleUnsupportedCmd();\n                body.push(errorNode);\n\n                pos = lex.position;\n                continue;\n            }\n\n            break;\n        }\n        if (breakOnInfix && atom.type === \"infix\") {\n            // rewind so we can parse the infix atom again\n            this.pos = pos;\n            this.nextToken = lex;\n            break;\n        }\n        body.push(atom);\n    }\n    return this.handleInfixNodes(body);\n};\n\n/**\n * Rewrites infix operators such as \\over with corresponding commands such\n * as \\frac.\n *\n * There can only be one infix operator per group.  If there's more than one\n * then the expression is ambiguous.  This can be resolved by adding {}.\n *\n * @returns {Array}\n */\nParser.prototype.handleInfixNodes = function(body) {\n    var overIndex = -1;\n    var funcName;\n\n    for (var i = 0; i < body.length; i++) {\n        var node = body[i];\n        if (node.type === \"infix\") {\n            if (overIndex !== -1) {\n                throw new ParseError(\"only one infix operator per group\",\n                    this.lexer, -1);\n            }\n            overIndex = i;\n            funcName = node.value.replaceWith;\n        }\n    }\n\n    if (overIndex !== -1) {\n        var numerNode;\n        var denomNode;\n\n        var numerBody = body.slice(0, overIndex);\n        var denomBody = body.slice(overIndex + 1);\n\n        if (numerBody.length === 1 && numerBody[0].type === \"ordgroup\") {\n            numerNode = numerBody[0];\n        } else {\n            numerNode = new ParseNode(\"ordgroup\", numerBody, this.mode);\n        }\n\n        if (denomBody.length === 1 && denomBody[0].type === \"ordgroup\") {\n            denomNode = denomBody[0];\n        } else {\n            denomNode = new ParseNode(\"ordgroup\", denomBody, this.mode);\n        }\n\n        var value = this.callFunction(\n            funcName, [numerNode, denomNode], null);\n        return [new ParseNode(value.type, value, this.mode)];\n    } else {\n        return body;\n    }\n};\n\n// The greediness of a superscript or subscript\nvar SUPSUB_GREEDINESS = 1;\n\n/**\n * Handle a subscript or superscript with nice errors.\n */\nParser.prototype.handleSupSubscript = function(name) {\n    var symbol = this.nextToken.text;\n    var symPos = this.pos;\n    this.consume();\n    var group = this.parseGroup();\n\n    if (!group) {\n        if (!this.settings.throwOnError && this.nextToken.text[0] === \"\\\\\") {\n            return this.handleUnsupportedCmd();\n        } else {\n            throw new ParseError(\n                \"Expected group after '\" + symbol + \"'\",\n                this.lexer,\n                symPos + 1\n            );\n        }\n    } else if (group.isFunction) {\n        // ^ and _ have a greediness, so handle interactions with functions'\n        // greediness\n        var funcGreediness = functions[group.result].greediness;\n        if (funcGreediness > SUPSUB_GREEDINESS) {\n            return this.parseFunction(group);\n        } else {\n            throw new ParseError(\n                \"Got function '\" + group.result + \"' with no arguments \" +\n                    \"as \" + name,\n                this.lexer, symPos + 1);\n        }\n    } else {\n        return group.result;\n    }\n};\n\n/**\n * Converts the textual input of an unsupported command into a text node\n * contained within a color node whose color is determined by errorColor\n */\nParser.prototype.handleUnsupportedCmd = function() {\n    var text = this.nextToken.text;\n    var textordArray = [];\n\n    for (var i = 0; i < text.length; i++) {\n        textordArray.push(new ParseNode(\"textord\", text[i], \"text\"));\n    }\n\n    var textNode = new ParseNode(\n        \"text\",\n        {\n            body: textordArray,\n            type: \"text\",\n        },\n        this.mode);\n\n    var colorNode = new ParseNode(\n        \"color\",\n        {\n            color: this.settings.errorColor,\n            value: [textNode],\n            type: \"color\",\n        },\n        this.mode);\n\n    this.consume();\n    return colorNode;\n};\n\n/**\n * Parses a group with optional super/subscripts.\n *\n * @return {?ParseNode}\n */\nParser.prototype.parseAtom = function() {\n    // The body of an atom is an implicit group, so that things like\n    // \\left(x\\right)^2 work correctly.\n    var base = this.parseImplicitGroup();\n\n    // In text mode, we don't have superscripts or subscripts\n    if (this.mode === \"text\") {\n        return base;\n    }\n\n    // Note that base may be empty (i.e. null) at this point.\n\n    var superscript;\n    var subscript;\n    while (true) {\n        // Lex the first token\n        var lex = this.nextToken;\n\n        if (lex.text === \"\\\\limits\" || lex.text === \"\\\\nolimits\") {\n            // We got a limit control\n            if (!base || base.type !== \"op\") {\n                throw new ParseError(\n                    \"Limit controls must follow a math operator\",\n                    this.lexer, this.pos);\n            } else {\n                var limits = lex.text === \"\\\\limits\";\n                base.value.limits = limits;\n                base.value.alwaysHandleSupSub = true;\n            }\n            this.consume();\n        } else if (lex.text === \"^\") {\n            // We got a superscript start\n            if (superscript) {\n                throw new ParseError(\n                    \"Double superscript\", this.lexer, this.pos);\n            }\n            superscript = this.handleSupSubscript(\"superscript\");\n        } else if (lex.text === \"_\") {\n            // We got a subscript start\n            if (subscript) {\n                throw new ParseError(\n                    \"Double subscript\", this.lexer, this.pos);\n            }\n            subscript = this.handleSupSubscript(\"subscript\");\n        } else if (lex.text === \"'\") {\n            // We got a prime\n            var prime = new ParseNode(\"textord\", \"\\\\prime\", this.mode);\n\n            // Many primes can be grouped together, so we handle this here\n            var primes = [prime];\n            this.consume();\n            // Keep lexing tokens until we get something that's not a prime\n            while (this.nextToken.text === \"'\") {\n                // For each one, add another prime to the list\n                primes.push(prime);\n                this.consume();\n            }\n            // Put them into an ordgroup as the superscript\n            superscript = new ParseNode(\"ordgroup\", primes, this.mode);\n        } else {\n            // If it wasn't ^, _, or ', stop parsing super/subscripts\n            break;\n        }\n    }\n\n    if (superscript || subscript) {\n        // If we got either a superscript or subscript, create a supsub\n        return new ParseNode(\"supsub\", {\n            base: base,\n            sup: superscript,\n            sub: subscript,\n        }, this.mode);\n    } else {\n        // Otherwise return the original body\n        return base;\n    }\n};\n\n// A list of the size-changing functions, for use in parseImplicitGroup\nvar sizeFuncs = [\n    \"\\\\tiny\", \"\\\\scriptsize\", \"\\\\footnotesize\", \"\\\\small\", \"\\\\normalsize\",\n    \"\\\\large\", \"\\\\Large\", \"\\\\LARGE\", \"\\\\huge\", \"\\\\Huge\",\n];\n\n// A list of the style-changing functions, for use in parseImplicitGroup\nvar styleFuncs = [\n    \"\\\\displaystyle\", \"\\\\textstyle\", \"\\\\scriptstyle\", \"\\\\scriptscriptstyle\",\n];\n\n/**\n * Parses an implicit group, which is a group that starts at the end of a\n * specified, and ends right before a higher explicit group ends, or at EOL. It\n * is used for functions that appear to affect the current style, like \\Large or\n * \\textrm, where instead of keeping a style we just pretend that there is an\n * implicit grouping after it until the end of the group. E.g.\n *   small text {\\Large large text} small text again\n * It is also used for \\left and \\right to get the correct grouping.\n *\n * @return {?ParseNode}\n */\nParser.prototype.parseImplicitGroup = function() {\n    var start = this.parseSymbol();\n\n    if (start == null) {\n        // If we didn't get anything we handle, fall back to parseFunction\n        return this.parseFunction();\n    }\n\n    var func = start.result;\n    var body;\n\n    if (func === \"\\\\left\") {\n        // If we see a left:\n        // Parse the entire left function (including the delimiter)\n        var left = this.parseFunction(start);\n        // Parse out the implicit body\n        body = this.parseExpression(false);\n        // Check the next token\n        this.expect(\"\\\\right\", false);\n        var right = this.parseFunction();\n        return new ParseNode(\"leftright\", {\n            body: body,\n            left: left.value.value,\n            right: right.value.value,\n        }, this.mode);\n    } else if (func === \"\\\\begin\") {\n        // begin...end is similar to left...right\n        var begin = this.parseFunction(start);\n        var envName = begin.value.name;\n        if (!environments.hasOwnProperty(envName)) {\n            throw new ParseError(\n                \"No such environment: \" + envName,\n                this.lexer, begin.value.namepos);\n        }\n        // Build the environment object. Arguments and other information will\n        // be made available to the begin and end methods using properties.\n        var env = environments[envName];\n        var args = this.parseArguments(\"\\\\begin{\" + envName + \"}\", env);\n        var context = {\n            mode: this.mode,\n            envName: envName,\n            parser: this,\n            lexer: this.lexer,\n            positions: args.pop(),\n        };\n        var result = env.handler(context, args);\n        this.expect(\"\\\\end\", false);\n        var end = this.parseFunction();\n        if (end.value.name !== envName) {\n            throw new ParseError(\n                \"Mismatch: \\\\begin{\" + envName + \"} matched \" +\n                \"by \\\\end{\" + end.value.name + \"}\",\n                this.lexer /* , end.value.namepos */);\n            // TODO: Add position to the above line and adjust test case,\n            // requires #385 to get merged first\n        }\n        result.position = end.position;\n        return result;\n    } else if (utils.contains(sizeFuncs, func)) {\n        // If we see a sizing function, parse out the implict body\n        body = this.parseExpression(false);\n        return new ParseNode(\"sizing\", {\n            // Figure out what size to use based on the list of functions above\n            size: \"size\" + (utils.indexOf(sizeFuncs, func) + 1),\n            value: body,\n        }, this.mode);\n    } else if (utils.contains(styleFuncs, func)) {\n        // If we see a styling function, parse out the implict body\n        body = this.parseExpression(true);\n        return new ParseNode(\"styling\", {\n            // Figure out what style to use by pulling out the style from\n            // the function name\n            style: func.slice(1, func.length - 5),\n            value: body,\n        }, this.mode);\n    } else {\n        // Defer to parseFunction if it's not a function we handle\n        return this.parseFunction(start);\n    }\n};\n\n/**\n * Parses an entire function, including its base and all of its arguments.\n * The base might either have been parsed already, in which case\n * it is provided as an argument, or it's the next group in the input.\n *\n * @param {ParseFuncOrArgument=} baseGroup optional as described above\n * @return {?ParseNode}\n */\nParser.prototype.parseFunction = function(baseGroup) {\n    if (!baseGroup) {\n        baseGroup = this.parseGroup();\n    }\n\n    if (baseGroup) {\n        if (baseGroup.isFunction) {\n            var func = baseGroup.result;\n            var funcData = functions[func];\n            if (this.mode === \"text\" && !funcData.allowedInText) {\n                throw new ParseError(\n                    \"Can't use function '\" + func + \"' in text mode\",\n                    this.lexer, baseGroup.position);\n            }\n\n            var args = this.parseArguments(func, funcData);\n            var result = this.callFunction(func, args, args.pop());\n            return new ParseNode(result.type, result, this.mode);\n        } else {\n            return baseGroup.result;\n        }\n    } else {\n        return null;\n    }\n};\n\n/**\n * Call a function handler with a suitable context and arguments.\n */\nParser.prototype.callFunction = function(name, args, positions) {\n    var context = {\n        funcName: name,\n        parser: this,\n        lexer: this.lexer,\n        positions: positions,\n    };\n    return functions[name].handler(context, args);\n};\n\n/**\n * Parses the arguments of a function or environment\n *\n * @param {string} func  \"\\name\" or \"\\begin{name}\"\n * @param {{numArgs:number,numOptionalArgs:number|undefined}} funcData\n * @return the array of arguments, with the list of positions as last element\n */\nParser.prototype.parseArguments = function(func, funcData) {\n    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;\n    if (totalArgs === 0) {\n        return [[this.pos]];\n    }\n\n    var baseGreediness = funcData.greediness;\n    var positions = [this.pos];\n    var args = [];\n\n    for (var i = 0; i < totalArgs; i++) {\n        var argType = funcData.argTypes && funcData.argTypes[i];\n        var arg;\n        if (i < funcData.numOptionalArgs) {\n            if (argType) {\n                arg = this.parseSpecialGroup(argType, true);\n            } else {\n                arg = this.parseOptionalGroup();\n            }\n            if (!arg) {\n                args.push(null);\n                positions.push(this.pos);\n                continue;\n            }\n        } else {\n            if (argType) {\n                arg = this.parseSpecialGroup(argType);\n            } else {\n                arg = this.parseGroup();\n            }\n            if (!arg) {\n                if (!this.settings.throwOnError &&\n                    this.nextToken.text[0] === \"\\\\\") {\n                    arg = new ParseFuncOrArgument(\n                        this.handleUnsupportedCmd(this.nextToken.text),\n                        false);\n                } else {\n                    throw new ParseError(\n                        \"Expected group after '\" + func + \"'\",\n                        this.lexer, this.pos);\n                }\n            }\n        }\n        var argNode;\n        if (arg.isFunction) {\n            var argGreediness =\n                functions[arg.result].greediness;\n            if (argGreediness > baseGreediness) {\n                argNode = this.parseFunction(arg);\n            } else {\n                throw new ParseError(\n                    \"Got function '\" + arg.result + \"' as \" +\n                    \"argument to '\" + func + \"'\",\n                    this.lexer, this.pos - 1);\n            }\n        } else {\n            argNode = arg.result;\n        }\n        args.push(argNode);\n        positions.push(this.pos);\n    }\n\n    args.push(positions);\n\n    return args;\n};\n\n\n/**\n * Parses a group when the mode is changing. Takes a position, a new mode, and\n * an outer mode that is used to parse the outside.\n *\n * @return {?ParseFuncOrArgument}\n */\nParser.prototype.parseSpecialGroup = function(innerMode, optional) {\n    var outerMode = this.mode;\n    // Handle `original` argTypes\n    if (innerMode === \"original\") {\n        innerMode = outerMode;\n    }\n\n    if (innerMode === \"color\" || innerMode === \"size\") {\n        // color and size modes are special because they should have braces and\n        // should only lex a single symbol inside\n        var openBrace = this.nextToken;\n        if (optional && openBrace.text !== \"[\") {\n            // optional arguments should return null if they don't exist\n            return null;\n        }\n        // The call to expect will lex the token after the '{' in inner mode\n        this.mode = innerMode;\n        this.expect(optional ? \"[\" : \"{\");\n        var inner = this.nextToken;\n        this.mode = outerMode;\n        var data;\n        if (innerMode === \"color\") {\n            data = inner.text;\n        } else {\n            data = inner.data;\n        }\n        this.consume(); // consume the token stored in inner\n        this.expect(optional ? \"]\" : \"}\");\n        return new ParseFuncOrArgument(\n            new ParseNode(innerMode, data, outerMode),\n            false);\n    } else if (innerMode === \"text\") {\n        // text mode is special because it should ignore the whitespace before\n        // it\n        var whitespace = this.lexer.lex(this.pos, \"whitespace\");\n        this.pos = whitespace.position;\n    }\n\n    // By the time we get here, innerMode is one of \"text\" or \"math\".\n    // We switch the mode of the parser, recurse, then restore the old mode.\n    this.mode = innerMode;\n    this.nextToken = this.lexer.lex(this.pos, innerMode);\n    var res;\n    if (optional) {\n        res = this.parseOptionalGroup();\n    } else {\n        res = this.parseGroup();\n    }\n    this.mode = outerMode;\n    this.nextToken = this.lexer.lex(this.pos, outerMode);\n    return res;\n};\n\n/**\n * Parses a group, which is either a single nucleus (like \"x\") or an expression\n * in braces (like \"{x+y}\")\n *\n * @return {?ParseFuncOrArgument}\n */\nParser.prototype.parseGroup = function() {\n    // Try to parse an open brace\n    if (this.nextToken.text === \"{\") {\n        // If we get a brace, parse an expression\n        this.consume();\n        var expression = this.parseExpression(false);\n        // Make sure we get a close brace\n        this.expect(\"}\");\n        return new ParseFuncOrArgument(\n            new ParseNode(\"ordgroup\", expression, this.mode),\n            false);\n    } else {\n        // Otherwise, just return a nucleus\n        return this.parseSymbol();\n    }\n};\n\n/**\n * Parses a group, which is an expression in brackets (like \"[x+y]\")\n *\n * @return {?ParseFuncOrArgument}\n */\nParser.prototype.parseOptionalGroup = function() {\n    // Try to parse an open bracket\n    if (this.nextToken.text === \"[\") {\n        // If we get a brace, parse an expression\n        this.consume();\n        var expression = this.parseExpression(false, \"]\");\n        // Make sure we get a close bracket\n        this.expect(\"]\");\n        return new ParseFuncOrArgument(\n            new ParseNode(\"ordgroup\", expression, this.mode),\n            false);\n    } else {\n        // Otherwise, return null,\n        return null;\n    }\n};\n\n/**\n * Parse a single symbol out of the string. Here, we handle both the functions\n * we have defined, as well as the single character symbols\n *\n * @return {?ParseFuncOrArgument}\n */\nParser.prototype.parseSymbol = function() {\n    var nucleus = this.nextToken;\n\n    if (functions[nucleus.text]) {\n        this.consume();\n        // If there exists a function with this name, we return the function and\n        // say that it is a function.\n        return new ParseFuncOrArgument(\n            nucleus.text,\n            true);\n    } else if (symbols[this.mode][nucleus.text]) {\n        this.consume();\n        // Otherwise if this is a no-argument function, find the type it\n        // corresponds to in the symbols map\n        return new ParseFuncOrArgument(\n            new ParseNode(symbols[this.mode][nucleus.text].group,\n                          nucleus.text, this.mode),\n            false);\n    } else {\n        return null;\n    }\n};\n\nParser.prototype.ParseNode = ParseNode;\n\nmodule.exports = Parser;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/katex/src/Parser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/katex/src/Parser.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}}],"sources":{"../node_modules/katex/src/Parser.js":"/* eslint no-constant-condition:0 */\nvar functions = require(\"./functions\");\nvar environments = require(\"./environments\");\nvar Lexer = require(\"./Lexer\");\nvar symbols = require(\"./symbols\");\nvar utils = require(\"./utils\");\n\nvar parseData = require(\"./parseData\");\nvar ParseError = require(\"./ParseError\");\n\n/**\n * This file contains the parser used to parse out a TeX expression from the\n * input. Since TeX isn't context-free, standard parsers don't work particularly\n * well.\n *\n * The strategy of this parser is as such:\n *\n * The main functions (the `.parse...` ones) take a position in the current\n * parse string to parse tokens from. The lexer (found in Lexer.js, stored at\n * this.lexer) also supports pulling out tokens at arbitrary places. When\n * individual tokens are needed at a position, the lexer is called to pull out a\n * token, which is then used.\n *\n * The parser has a property called \"mode\" indicating the mode that\n * the parser is currently in. Currently it has to be one of \"math\" or\n * \"text\", which denotes whether the current environment is a math-y\n * one or a text-y one (e.g. inside \\text). Currently, this serves to\n * limit the functions which can be used in text mode.\n *\n * The main functions then return an object which contains the useful data that\n * was parsed at its given point, and a new position at the end of the parsed\n * data. The main functions can call each other and continue the parsing by\n * using the returned position as a new starting point.\n *\n * There are also extra `.handle...` functions, which pull out some reused\n * functionality into self-contained functions.\n *\n * The earlier functions return ParseNodes.\n * The later functions (which are called deeper in the parse) sometimes return\n * ParseFuncOrArgument, which contain a ParseNode as well as some data about\n * whether the parsed object is a function which is missing some arguments, or a\n * standalone object which can be used as an argument to another function.\n */\n\n/**\n * Main Parser class\n */\nfunction Parser(input, settings) {\n    // Make a new lexer\n    this.lexer = new Lexer(input);\n    // Store the settings for use in parsing\n    this.settings = settings;\n}\n\nvar ParseNode = parseData.ParseNode;\n\n/**\n * An initial function (without its arguments), or an argument to a function.\n * The `result` argument should be a ParseNode.\n */\nfunction ParseFuncOrArgument(result, isFunction) {\n    this.result = result;\n    // Is this a function (i.e. is it something defined in functions.js)?\n    this.isFunction = isFunction;\n}\n\n/**\n * Checks a result to make sure it has the right type, and throws an\n * appropriate error otherwise.\n *\n * @param {boolean=} consume whether to consume the expected token,\n *                           defaults to true\n */\nParser.prototype.expect = function(text, consume) {\n    if (this.nextToken.text !== text) {\n        throw new ParseError(\n            \"Expected '\" + text + \"', got '\" + this.nextToken.text + \"'\",\n            this.lexer, this.nextToken.position\n        );\n    }\n    if (consume !== false) {\n        this.consume();\n    }\n};\n\n/**\n * Considers the current look ahead token as consumed,\n * and fetches the one after that as the new look ahead.\n */\nParser.prototype.consume = function() {\n    this.pos = this.nextToken.position;\n    this.nextToken = this.lexer.lex(this.pos, this.mode);\n};\n\n/**\n * Main parsing function, which parses an entire input.\n *\n * @return {?Array.<ParseNode>}\n */\nParser.prototype.parse = function() {\n    // Try to parse the input\n    this.mode = \"math\";\n    this.pos = 0;\n    this.nextToken = this.lexer.lex(this.pos, this.mode);\n    var parse = this.parseInput();\n    return parse;\n};\n\n/**\n * Parses an entire input tree.\n */\nParser.prototype.parseInput = function() {\n    // Parse an expression\n    var expression = this.parseExpression(false);\n    // If we succeeded, make sure there's an EOF at the end\n    this.expect(\"EOF\", false);\n    return expression;\n};\n\nvar endOfExpression = [\"}\", \"\\\\end\", \"\\\\right\", \"&\", \"\\\\\\\\\", \"\\\\cr\"];\n\n/**\n * Parses an \"expression\", which is a list of atoms.\n *\n * @param {boolean} breakOnInfix Should the parsing stop when we hit infix\n *                  nodes? This happens when functions have higher precendence\n *                  than infix nodes in implicit parses.\n *\n * @param {?string} breakOnToken The token that the expression should end with,\n *                  or `null` if something else should end the expression.\n *\n * @return {ParseNode}\n */\nParser.prototype.parseExpression = function(breakOnInfix, breakOnToken) {\n    var body = [];\n    // Keep adding atoms to the body until we can't parse any more atoms (either\n    // we reached the end, a }, or a \\right)\n    while (true) {\n        var lex = this.nextToken;\n        var pos = this.pos;\n        if (endOfExpression.indexOf(lex.text) !== -1) {\n            break;\n        }\n        if (breakOnToken && lex.text === breakOnToken) {\n            break;\n        }\n        var atom = this.parseAtom();\n        if (!atom) {\n            if (!this.settings.throwOnError && lex.text[0] === \"\\\\\") {\n                var errorNode = this.handleUnsupportedCmd();\n                body.push(errorNode);\n\n                pos = lex.position;\n                continue;\n            }\n\n            break;\n        }\n        if (breakOnInfix && atom.type === \"infix\") {\n            // rewind so we can parse the infix atom again\n            this.pos = pos;\n            this.nextToken = lex;\n            break;\n        }\n        body.push(atom);\n    }\n    return this.handleInfixNodes(body);\n};\n\n/**\n * Rewrites infix operators such as \\over with corresponding commands such\n * as \\frac.\n *\n * There can only be one infix operator per group.  If there's more than one\n * then the expression is ambiguous.  This can be resolved by adding {}.\n *\n * @returns {Array}\n */\nParser.prototype.handleInfixNodes = function(body) {\n    var overIndex = -1;\n    var funcName;\n\n    for (var i = 0; i < body.length; i++) {\n        var node = body[i];\n        if (node.type === \"infix\") {\n            if (overIndex !== -1) {\n                throw new ParseError(\"only one infix operator per group\",\n                    this.lexer, -1);\n            }\n            overIndex = i;\n            funcName = node.value.replaceWith;\n        }\n    }\n\n    if (overIndex !== -1) {\n        var numerNode;\n        var denomNode;\n\n        var numerBody = body.slice(0, overIndex);\n        var denomBody = body.slice(overIndex + 1);\n\n        if (numerBody.length === 1 && numerBody[0].type === \"ordgroup\") {\n            numerNode = numerBody[0];\n        } else {\n            numerNode = new ParseNode(\"ordgroup\", numerBody, this.mode);\n        }\n\n        if (denomBody.length === 1 && denomBody[0].type === \"ordgroup\") {\n            denomNode = denomBody[0];\n        } else {\n            denomNode = new ParseNode(\"ordgroup\", denomBody, this.mode);\n        }\n\n        var value = this.callFunction(\n            funcName, [numerNode, denomNode], null);\n        return [new ParseNode(value.type, value, this.mode)];\n    } else {\n        return body;\n    }\n};\n\n// The greediness of a superscript or subscript\nvar SUPSUB_GREEDINESS = 1;\n\n/**\n * Handle a subscript or superscript with nice errors.\n */\nParser.prototype.handleSupSubscript = function(name) {\n    var symbol = this.nextToken.text;\n    var symPos = this.pos;\n    this.consume();\n    var group = this.parseGroup();\n\n    if (!group) {\n        if (!this.settings.throwOnError && this.nextToken.text[0] === \"\\\\\") {\n            return this.handleUnsupportedCmd();\n        } else {\n            throw new ParseError(\n                \"Expected group after '\" + symbol + \"'\",\n                this.lexer,\n                symPos + 1\n            );\n        }\n    } else if (group.isFunction) {\n        // ^ and _ have a greediness, so handle interactions with functions'\n        // greediness\n        var funcGreediness = functions[group.result].greediness;\n        if (funcGreediness > SUPSUB_GREEDINESS) {\n            return this.parseFunction(group);\n        } else {\n            throw new ParseError(\n                \"Got function '\" + group.result + \"' with no arguments \" +\n                    \"as \" + name,\n                this.lexer, symPos + 1);\n        }\n    } else {\n        return group.result;\n    }\n};\n\n/**\n * Converts the textual input of an unsupported command into a text node\n * contained within a color node whose color is determined by errorColor\n */\nParser.prototype.handleUnsupportedCmd = function() {\n    var text = this.nextToken.text;\n    var textordArray = [];\n\n    for (var i = 0; i < text.length; i++) {\n        textordArray.push(new ParseNode(\"textord\", text[i], \"text\"));\n    }\n\n    var textNode = new ParseNode(\n        \"text\",\n        {\n            body: textordArray,\n            type: \"text\",\n        },\n        this.mode);\n\n    var colorNode = new ParseNode(\n        \"color\",\n        {\n            color: this.settings.errorColor,\n            value: [textNode],\n            type: \"color\",\n        },\n        this.mode);\n\n    this.consume();\n    return colorNode;\n};\n\n/**\n * Parses a group with optional super/subscripts.\n *\n * @return {?ParseNode}\n */\nParser.prototype.parseAtom = function() {\n    // The body of an atom is an implicit group, so that things like\n    // \\left(x\\right)^2 work correctly.\n    var base = this.parseImplicitGroup();\n\n    // In text mode, we don't have superscripts or subscripts\n    if (this.mode === \"text\") {\n        return base;\n    }\n\n    // Note that base may be empty (i.e. null) at this point.\n\n    var superscript;\n    var subscript;\n    while (true) {\n        // Lex the first token\n        var lex = this.nextToken;\n\n        if (lex.text === \"\\\\limits\" || lex.text === \"\\\\nolimits\") {\n            // We got a limit control\n            if (!base || base.type !== \"op\") {\n                throw new ParseError(\n                    \"Limit controls must follow a math operator\",\n                    this.lexer, this.pos);\n            } else {\n                var limits = lex.text === \"\\\\limits\";\n                base.value.limits = limits;\n                base.value.alwaysHandleSupSub = true;\n            }\n            this.consume();\n        } else if (lex.text === \"^\") {\n            // We got a superscript start\n            if (superscript) {\n                throw new ParseError(\n                    \"Double superscript\", this.lexer, this.pos);\n            }\n            superscript = this.handleSupSubscript(\"superscript\");\n        } else if (lex.text === \"_\") {\n            // We got a subscript start\n            if (subscript) {\n                throw new ParseError(\n                    \"Double subscript\", this.lexer, this.pos);\n            }\n            subscript = this.handleSupSubscript(\"subscript\");\n        } else if (lex.text === \"'\") {\n            // We got a prime\n            var prime = new ParseNode(\"textord\", \"\\\\prime\", this.mode);\n\n            // Many primes can be grouped together, so we handle this here\n            var primes = [prime];\n            this.consume();\n            // Keep lexing tokens until we get something that's not a prime\n            while (this.nextToken.text === \"'\") {\n                // For each one, add another prime to the list\n                primes.push(prime);\n                this.consume();\n            }\n            // Put them into an ordgroup as the superscript\n            superscript = new ParseNode(\"ordgroup\", primes, this.mode);\n        } else {\n            // If it wasn't ^, _, or ', stop parsing super/subscripts\n            break;\n        }\n    }\n\n    if (superscript || subscript) {\n        // If we got either a superscript or subscript, create a supsub\n        return new ParseNode(\"supsub\", {\n            base: base,\n            sup: superscript,\n            sub: subscript,\n        }, this.mode);\n    } else {\n        // Otherwise return the original body\n        return base;\n    }\n};\n\n// A list of the size-changing functions, for use in parseImplicitGroup\nvar sizeFuncs = [\n    \"\\\\tiny\", \"\\\\scriptsize\", \"\\\\footnotesize\", \"\\\\small\", \"\\\\normalsize\",\n    \"\\\\large\", \"\\\\Large\", \"\\\\LARGE\", \"\\\\huge\", \"\\\\Huge\",\n];\n\n// A list of the style-changing functions, for use in parseImplicitGroup\nvar styleFuncs = [\n    \"\\\\displaystyle\", \"\\\\textstyle\", \"\\\\scriptstyle\", \"\\\\scriptscriptstyle\",\n];\n\n/**\n * Parses an implicit group, which is a group that starts at the end of a\n * specified, and ends right before a higher explicit group ends, or at EOL. It\n * is used for functions that appear to affect the current style, like \\Large or\n * \\textrm, where instead of keeping a style we just pretend that there is an\n * implicit grouping after it until the end of the group. E.g.\n *   small text {\\Large large text} small text again\n * It is also used for \\left and \\right to get the correct grouping.\n *\n * @return {?ParseNode}\n */\nParser.prototype.parseImplicitGroup = function() {\n    var start = this.parseSymbol();\n\n    if (start == null) {\n        // If we didn't get anything we handle, fall back to parseFunction\n        return this.parseFunction();\n    }\n\n    var func = start.result;\n    var body;\n\n    if (func === \"\\\\left\") {\n        // If we see a left:\n        // Parse the entire left function (including the delimiter)\n        var left = this.parseFunction(start);\n        // Parse out the implicit body\n        body = this.parseExpression(false);\n        // Check the next token\n        this.expect(\"\\\\right\", false);\n        var right = this.parseFunction();\n        return new ParseNode(\"leftright\", {\n            body: body,\n            left: left.value.value,\n            right: right.value.value,\n        }, this.mode);\n    } else if (func === \"\\\\begin\") {\n        // begin...end is similar to left...right\n        var begin = this.parseFunction(start);\n        var envName = begin.value.name;\n        if (!environments.hasOwnProperty(envName)) {\n            throw new ParseError(\n                \"No such environment: \" + envName,\n                this.lexer, begin.value.namepos);\n        }\n        // Build the environment object. Arguments and other information will\n        // be made available to the begin and end methods using properties.\n        var env = environments[envName];\n        var args = this.parseArguments(\"\\\\begin{\" + envName + \"}\", env);\n        var context = {\n            mode: this.mode,\n            envName: envName,\n            parser: this,\n            lexer: this.lexer,\n            positions: args.pop(),\n        };\n        var result = env.handler(context, args);\n        this.expect(\"\\\\end\", false);\n        var end = this.parseFunction();\n        if (end.value.name !== envName) {\n            throw new ParseError(\n                \"Mismatch: \\\\begin{\" + envName + \"} matched \" +\n                \"by \\\\end{\" + end.value.name + \"}\",\n                this.lexer /* , end.value.namepos */);\n            // TODO: Add position to the above line and adjust test case,\n            // requires #385 to get merged first\n        }\n        result.position = end.position;\n        return result;\n    } else if (utils.contains(sizeFuncs, func)) {\n        // If we see a sizing function, parse out the implict body\n        body = this.parseExpression(false);\n        return new ParseNode(\"sizing\", {\n            // Figure out what size to use based on the list of functions above\n            size: \"size\" + (utils.indexOf(sizeFuncs, func) + 1),\n            value: body,\n        }, this.mode);\n    } else if (utils.contains(styleFuncs, func)) {\n        // If we see a styling function, parse out the implict body\n        body = this.parseExpression(true);\n        return new ParseNode(\"styling\", {\n            // Figure out what style to use by pulling out the style from\n            // the function name\n            style: func.slice(1, func.length - 5),\n            value: body,\n        }, this.mode);\n    } else {\n        // Defer to parseFunction if it's not a function we handle\n        return this.parseFunction(start);\n    }\n};\n\n/**\n * Parses an entire function, including its base and all of its arguments.\n * The base might either have been parsed already, in which case\n * it is provided as an argument, or it's the next group in the input.\n *\n * @param {ParseFuncOrArgument=} baseGroup optional as described above\n * @return {?ParseNode}\n */\nParser.prototype.parseFunction = function(baseGroup) {\n    if (!baseGroup) {\n        baseGroup = this.parseGroup();\n    }\n\n    if (baseGroup) {\n        if (baseGroup.isFunction) {\n            var func = baseGroup.result;\n            var funcData = functions[func];\n            if (this.mode === \"text\" && !funcData.allowedInText) {\n                throw new ParseError(\n                    \"Can't use function '\" + func + \"' in text mode\",\n                    this.lexer, baseGroup.position);\n            }\n\n            var args = this.parseArguments(func, funcData);\n            var result = this.callFunction(func, args, args.pop());\n            return new ParseNode(result.type, result, this.mode);\n        } else {\n            return baseGroup.result;\n        }\n    } else {\n        return null;\n    }\n};\n\n/**\n * Call a function handler with a suitable context and arguments.\n */\nParser.prototype.callFunction = function(name, args, positions) {\n    var context = {\n        funcName: name,\n        parser: this,\n        lexer: this.lexer,\n        positions: positions,\n    };\n    return functions[name].handler(context, args);\n};\n\n/**\n * Parses the arguments of a function or environment\n *\n * @param {string} func  \"\\name\" or \"\\begin{name}\"\n * @param {{numArgs:number,numOptionalArgs:number|undefined}} funcData\n * @return the array of arguments, with the list of positions as last element\n */\nParser.prototype.parseArguments = function(func, funcData) {\n    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;\n    if (totalArgs === 0) {\n        return [[this.pos]];\n    }\n\n    var baseGreediness = funcData.greediness;\n    var positions = [this.pos];\n    var args = [];\n\n    for (var i = 0; i < totalArgs; i++) {\n        var argType = funcData.argTypes && funcData.argTypes[i];\n        var arg;\n        if (i < funcData.numOptionalArgs) {\n            if (argType) {\n                arg = this.parseSpecialGroup(argType, true);\n            } else {\n                arg = this.parseOptionalGroup();\n            }\n            if (!arg) {\n                args.push(null);\n                positions.push(this.pos);\n                continue;\n            }\n        } else {\n            if (argType) {\n                arg = this.parseSpecialGroup(argType);\n            } else {\n                arg = this.parseGroup();\n            }\n            if (!arg) {\n                if (!this.settings.throwOnError &&\n                    this.nextToken.text[0] === \"\\\\\") {\n                    arg = new ParseFuncOrArgument(\n                        this.handleUnsupportedCmd(this.nextToken.text),\n                        false);\n                } else {\n                    throw new ParseError(\n                        \"Expected group after '\" + func + \"'\",\n                        this.lexer, this.pos);\n                }\n            }\n        }\n        var argNode;\n        if (arg.isFunction) {\n            var argGreediness =\n                functions[arg.result].greediness;\n            if (argGreediness > baseGreediness) {\n                argNode = this.parseFunction(arg);\n            } else {\n                throw new ParseError(\n                    \"Got function '\" + arg.result + \"' as \" +\n                    \"argument to '\" + func + \"'\",\n                    this.lexer, this.pos - 1);\n            }\n        } else {\n            argNode = arg.result;\n        }\n        args.push(argNode);\n        positions.push(this.pos);\n    }\n\n    args.push(positions);\n\n    return args;\n};\n\n\n/**\n * Parses a group when the mode is changing. Takes a position, a new mode, and\n * an outer mode that is used to parse the outside.\n *\n * @return {?ParseFuncOrArgument}\n */\nParser.prototype.parseSpecialGroup = function(innerMode, optional) {\n    var outerMode = this.mode;\n    // Handle `original` argTypes\n    if (innerMode === \"original\") {\n        innerMode = outerMode;\n    }\n\n    if (innerMode === \"color\" || innerMode === \"size\") {\n        // color and size modes are special because they should have braces and\n        // should only lex a single symbol inside\n        var openBrace = this.nextToken;\n        if (optional && openBrace.text !== \"[\") {\n            // optional arguments should return null if they don't exist\n            return null;\n        }\n        // The call to expect will lex the token after the '{' in inner mode\n        this.mode = innerMode;\n        this.expect(optional ? \"[\" : \"{\");\n        var inner = this.nextToken;\n        this.mode = outerMode;\n        var data;\n        if (innerMode === \"color\") {\n            data = inner.text;\n        } else {\n            data = inner.data;\n        }\n        this.consume(); // consume the token stored in inner\n        this.expect(optional ? \"]\" : \"}\");\n        return new ParseFuncOrArgument(\n            new ParseNode(innerMode, data, outerMode),\n            false);\n    } else if (innerMode === \"text\") {\n        // text mode is special because it should ignore the whitespace before\n        // it\n        var whitespace = this.lexer.lex(this.pos, \"whitespace\");\n        this.pos = whitespace.position;\n    }\n\n    // By the time we get here, innerMode is one of \"text\" or \"math\".\n    // We switch the mode of the parser, recurse, then restore the old mode.\n    this.mode = innerMode;\n    this.nextToken = this.lexer.lex(this.pos, innerMode);\n    var res;\n    if (optional) {\n        res = this.parseOptionalGroup();\n    } else {\n        res = this.parseGroup();\n    }\n    this.mode = outerMode;\n    this.nextToken = this.lexer.lex(this.pos, outerMode);\n    return res;\n};\n\n/**\n * Parses a group, which is either a single nucleus (like \"x\") or an expression\n * in braces (like \"{x+y}\")\n *\n * @return {?ParseFuncOrArgument}\n */\nParser.prototype.parseGroup = function() {\n    // Try to parse an open brace\n    if (this.nextToken.text === \"{\") {\n        // If we get a brace, parse an expression\n        this.consume();\n        var expression = this.parseExpression(false);\n        // Make sure we get a close brace\n        this.expect(\"}\");\n        return new ParseFuncOrArgument(\n            new ParseNode(\"ordgroup\", expression, this.mode),\n            false);\n    } else {\n        // Otherwise, just return a nucleus\n        return this.parseSymbol();\n    }\n};\n\n/**\n * Parses a group, which is an expression in brackets (like \"[x+y]\")\n *\n * @return {?ParseFuncOrArgument}\n */\nParser.prototype.parseOptionalGroup = function() {\n    // Try to parse an open bracket\n    if (this.nextToken.text === \"[\") {\n        // If we get a brace, parse an expression\n        this.consume();\n        var expression = this.parseExpression(false, \"]\");\n        // Make sure we get a close bracket\n        this.expect(\"]\");\n        return new ParseFuncOrArgument(\n            new ParseNode(\"ordgroup\", expression, this.mode),\n            false);\n    } else {\n        // Otherwise, return null,\n        return null;\n    }\n};\n\n/**\n * Parse a single symbol out of the string. Here, we handle both the functions\n * we have defined, as well as the single character symbols\n *\n * @return {?ParseFuncOrArgument}\n */\nParser.prototype.parseSymbol = function() {\n    var nucleus = this.nextToken;\n\n    if (functions[nucleus.text]) {\n        this.consume();\n        // If there exists a function with this name, we return the function and\n        // say that it is a function.\n        return new ParseFuncOrArgument(\n            nucleus.text,\n            true);\n    } else if (symbols[this.mode][nucleus.text]) {\n        this.consume();\n        // Otherwise if this is a no-argument function, find the type it\n        // corresponds to in the symbols map\n        return new ParseFuncOrArgument(\n            new ParseNode(symbols[this.mode][nucleus.text].group,\n                          nucleus.text, this.mode),\n            false);\n    } else {\n        return null;\n    }\n};\n\nParser.prototype.ParseNode = ParseNode;\n\nmodule.exports = Parser;\n"},"lineCount":738}},"error":null,"hash":"ce3b6e57054db35c09bcdf2c278b817d","cacheData":{"env":{}}}