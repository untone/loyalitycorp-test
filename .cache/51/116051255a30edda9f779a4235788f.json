{"id":"../node_modules/katex/src/delimiter.js","dependencies":[{"name":"/Users/untone/Sites/loyalitycorp-test/package.json","includedInParent":true,"mtime":1557582570376},{"name":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/package.json","includedInParent":true,"mtime":1557582566587},{"name":"./ParseError","loc":{"line":23,"column":25},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/delimiter.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/ParseError.js"},{"name":"./Style","loc":{"line":24,"column":20},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/delimiter.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/Style.js"},{"name":"./buildCommon","loc":{"line":26,"column":26},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/delimiter.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/buildCommon.js"},{"name":"./fontMetrics","loc":{"line":27,"column":26},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/delimiter.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/fontMetrics.js"},{"name":"./symbols","loc":{"line":28,"column":22},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/delimiter.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/symbols.js"},{"name":"./utils","loc":{"line":29,"column":20},"parent":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/delimiter.js","resolved":"/Users/untone/Sites/loyalitycorp-test/node_modules/katex/src/utils.js"}],"generated":{"js":"/**\n * This file deals with creating delimiters of various sizes. The TeXbook\n * discusses these routines on page 441-442, in the \"Another subroutine sets box\n * x to a specified variable delimiter\" paragraph.\n *\n * There are three main routines here. `makeSmallDelim` makes a delimiter in the\n * normal font, but in either text, script, or scriptscript style.\n * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,\n * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of\n * smaller pieces that are stacked on top of one another.\n *\n * The functions take a parameter `center`, which determines if the delimiter\n * should be centered around the axis.\n *\n * Then, there are three exposed functions. `sizedDelim` makes a delimiter in\n * one of the given sizes. This is used for things like `\\bigl`.\n * `customSizedDelim` makes a delimiter with a given total height+depth. It is\n * called in places like `\\sqrt`. `leftRightDelim` makes an appropriate\n * delimiter which surrounds an expression of a given height an depth. It is\n * used in `\\left` and `\\right`.\n */\n\nvar ParseError = require(\"./ParseError\");\nvar Style = require(\"./Style\");\n\nvar buildCommon = require(\"./buildCommon\");\nvar fontMetrics = require(\"./fontMetrics\");\nvar symbols = require(\"./symbols\");\nvar utils = require(\"./utils\");\n\nvar makeSpan = buildCommon.makeSpan;\n\n/**\n * Get the metrics for a given symbol and font, after transformation (i.e.\n * after following replacement from symbols.js)\n */\nvar getMetrics = function(symbol, font) {\n    if (symbols.math[symbol] && symbols.math[symbol].replace) {\n        return fontMetrics.getCharacterMetrics(\n            symbols.math[symbol].replace, font);\n    } else {\n        return fontMetrics.getCharacterMetrics(\n            symbol, font);\n    }\n};\n\n/**\n * Builds a symbol in the given font size (note size is an integer)\n */\nvar mathrmSize = function(value, size, mode) {\n    return buildCommon.makeSymbol(value, \"Size\" + size + \"-Regular\", mode);\n};\n\n/**\n * Puts a delimiter span in a given style, and adds appropriate height, depth,\n * and maxFontSizes.\n */\nvar styleWrap = function(delim, toStyle, options) {\n    var span = makeSpan(\n        [\"style-wrap\", options.style.reset(), toStyle.cls()], [delim]);\n\n    var multiplier = toStyle.sizeMultiplier / options.style.sizeMultiplier;\n\n    span.height *= multiplier;\n    span.depth *= multiplier;\n    span.maxFontSize = toStyle.sizeMultiplier;\n\n    return span;\n};\n\n/**\n * Makes a small delimiter. This is a delimiter that comes in the Main-Regular\n * font, but is restyled to either be in textstyle, scriptstyle, or\n * scriptscriptstyle.\n */\nvar makeSmallDelim = function(delim, style, center, options, mode) {\n    var text = buildCommon.makeSymbol(delim, \"Main-Regular\", mode);\n\n    var span = styleWrap(text, style, options);\n\n    if (center) {\n        var shift =\n            (1 - options.style.sizeMultiplier / style.sizeMultiplier) *\n            fontMetrics.metrics.axisHeight;\n\n        span.style.top = shift + \"em\";\n        span.height -= shift;\n        span.depth += shift;\n    }\n\n    return span;\n};\n\n/**\n * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,\n * Size3, or Size4 fonts. It is always rendered in textstyle.\n */\nvar makeLargeDelim = function(delim, size, center, options, mode) {\n    var inner = mathrmSize(delim, size, mode);\n\n    var span = styleWrap(\n        makeSpan([\"delimsizing\", \"size\" + size],\n                 [inner], options.getColor()),\n        Style.TEXT, options);\n\n    if (center) {\n        var shift = (1 - options.style.sizeMultiplier) *\n            fontMetrics.metrics.axisHeight;\n\n        span.style.top = shift + \"em\";\n        span.height -= shift;\n        span.depth += shift;\n    }\n\n    return span;\n};\n\n/**\n * Make an inner span with the given offset and in the given font. This is used\n * in `makeStackedDelim` to make the stacking pieces for the delimiter.\n */\nvar makeInner = function(symbol, font, mode) {\n    var sizeClass;\n    // Apply the correct CSS class to choose the right font.\n    if (font === \"Size1-Regular\") {\n        sizeClass = \"delim-size1\";\n    } else if (font === \"Size4-Regular\") {\n        sizeClass = \"delim-size4\";\n    }\n\n    var inner = makeSpan(\n        [\"delimsizinginner\", sizeClass],\n        [makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]);\n\n    // Since this will be passed into `makeVList` in the end, wrap the element\n    // in the appropriate tag that VList uses.\n    return {type: \"elem\", elem: inner};\n};\n\n/**\n * Make a stacked delimiter out of a given delimiter, with the total height at\n * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.\n */\nvar makeStackedDelim = function(delim, heightTotal, center, options, mode) {\n    // There are four parts, the top, an optional middle, a repeated part, and a\n    // bottom.\n    var top;\n    var middle;\n    var repeat;\n    var bottom;\n    top = repeat = bottom = delim;\n    middle = null;\n    // Also keep track of what font the delimiters are in\n    var font = \"Size1-Regular\";\n\n    // We set the parts and font based on the symbol. Note that we use\n    // '\\u23d0' instead of '|' and '\\u2016' instead of '\\\\|' for the\n    // repeats of the arrows\n    if (delim === \"\\\\uparrow\") {\n        repeat = bottom = \"\\u23d0\";\n    } else if (delim === \"\\\\Uparrow\") {\n        repeat = bottom = \"\\u2016\";\n    } else if (delim === \"\\\\downarrow\") {\n        top = repeat = \"\\u23d0\";\n    } else if (delim === \"\\\\Downarrow\") {\n        top = repeat = \"\\u2016\";\n    } else if (delim === \"\\\\updownarrow\") {\n        top = \"\\\\uparrow\";\n        repeat = \"\\u23d0\";\n        bottom = \"\\\\downarrow\";\n    } else if (delim === \"\\\\Updownarrow\") {\n        top = \"\\\\Uparrow\";\n        repeat = \"\\u2016\";\n        bottom = \"\\\\Downarrow\";\n    } else if (delim === \"[\" || delim === \"\\\\lbrack\") {\n        top = \"\\u23a1\";\n        repeat = \"\\u23a2\";\n        bottom = \"\\u23a3\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"]\" || delim === \"\\\\rbrack\") {\n        top = \"\\u23a4\";\n        repeat = \"\\u23a5\";\n        bottom = \"\\u23a6\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lfloor\") {\n        repeat = top = \"\\u23a2\";\n        bottom = \"\\u23a3\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lceil\") {\n        top = \"\\u23a1\";\n        repeat = bottom = \"\\u23a2\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rfloor\") {\n        repeat = top = \"\\u23a5\";\n        bottom = \"\\u23a6\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rceil\") {\n        top = \"\\u23a4\";\n        repeat = bottom = \"\\u23a5\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"(\") {\n        top = \"\\u239b\";\n        repeat = \"\\u239c\";\n        bottom = \"\\u239d\";\n        font = \"Size4-Regular\";\n    } else if (delim === \")\") {\n        top = \"\\u239e\";\n        repeat = \"\\u239f\";\n        bottom = \"\\u23a0\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\{\" || delim === \"\\\\lbrace\") {\n        top = \"\\u23a7\";\n        middle = \"\\u23a8\";\n        bottom = \"\\u23a9\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\}\" || delim === \"\\\\rbrace\") {\n        top = \"\\u23ab\";\n        middle = \"\\u23ac\";\n        bottom = \"\\u23ad\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lgroup\") {\n        top = \"\\u23a7\";\n        bottom = \"\\u23a9\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rgroup\") {\n        top = \"\\u23ab\";\n        bottom = \"\\u23ad\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lmoustache\") {\n        top = \"\\u23a7\";\n        bottom = \"\\u23ad\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rmoustache\") {\n        top = \"\\u23ab\";\n        bottom = \"\\u23a9\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\surd\") {\n        top = \"\\ue001\";\n        bottom = \"\\u23b7\";\n        repeat = \"\\ue000\";\n        font = \"Size4-Regular\";\n    }\n\n    // Get the metrics of the four sections\n    var topMetrics = getMetrics(top, font);\n    var topHeightTotal = topMetrics.height + topMetrics.depth;\n    var repeatMetrics = getMetrics(repeat, font);\n    var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;\n    var bottomMetrics = getMetrics(bottom, font);\n    var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;\n    var middleHeightTotal = 0;\n    var middleFactor = 1;\n    if (middle !== null) {\n        var middleMetrics = getMetrics(middle, font);\n        middleHeightTotal = middleMetrics.height + middleMetrics.depth;\n        middleFactor = 2; // repeat symmetrically above and below middle\n    }\n\n    // Calcuate the minimal height that the delimiter can have.\n    // It is at least the size of the top, bottom, and optional middle combined.\n    var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;\n\n    // Compute the number of copies of the repeat symbol we will need\n    var repeatCount = Math.ceil(\n        (heightTotal - minHeight) / (middleFactor * repeatHeightTotal));\n\n    // Compute the total height of the delimiter including all the symbols\n    var realHeightTotal =\n        minHeight + repeatCount * middleFactor * repeatHeightTotal;\n\n    // The center of the delimiter is placed at the center of the axis. Note\n    // that in this context, \"center\" means that the delimiter should be\n    // centered around the axis in the current style, while normally it is\n    // centered around the axis in textstyle.\n    var axisHeight = fontMetrics.metrics.axisHeight;\n    if (center) {\n        axisHeight *= options.style.sizeMultiplier;\n    }\n    // Calculate the depth\n    var depth = realHeightTotal / 2 - axisHeight;\n\n    // Now, we start building the pieces that will go into the vlist\n\n    // Keep a list of the inner pieces\n    var inners = [];\n\n    // Add the bottom symbol\n    inners.push(makeInner(bottom, font, mode));\n\n    var i;\n    if (middle === null) {\n        // Add that many symbols\n        for (i = 0; i < repeatCount; i++) {\n            inners.push(makeInner(repeat, font, mode));\n        }\n    } else {\n        // When there is a middle bit, we need the middle part and two repeated\n        // sections\n        for (i = 0; i < repeatCount; i++) {\n            inners.push(makeInner(repeat, font, mode));\n        }\n        inners.push(makeInner(middle, font, mode));\n        for (i = 0; i < repeatCount; i++) {\n            inners.push(makeInner(repeat, font, mode));\n        }\n    }\n\n    // Add the top symbol\n    inners.push(makeInner(top, font, mode));\n\n    // Finally, build the vlist\n    var inner = buildCommon.makeVList(inners, \"bottom\", depth, options);\n\n    return styleWrap(\n        makeSpan([\"delimsizing\", \"mult\"], [inner], options.getColor()),\n        Style.TEXT, options);\n};\n\n// There are three kinds of delimiters, delimiters that stack when they become\n// too large\nvar stackLargeDelimiters = [\n    \"(\", \")\", \"[\", \"\\\\lbrack\", \"]\", \"\\\\rbrack\",\n    \"\\\\{\", \"\\\\lbrace\", \"\\\\}\", \"\\\\rbrace\",\n    \"\\\\lfloor\", \"\\\\rfloor\", \"\\\\lceil\", \"\\\\rceil\",\n    \"\\\\surd\",\n];\n\n// delimiters that always stack\nvar stackAlwaysDelimiters = [\n    \"\\\\uparrow\", \"\\\\downarrow\", \"\\\\updownarrow\",\n    \"\\\\Uparrow\", \"\\\\Downarrow\", \"\\\\Updownarrow\",\n    \"|\", \"\\\\|\", \"\\\\vert\", \"\\\\Vert\",\n    \"\\\\lvert\", \"\\\\rvert\", \"\\\\lVert\", \"\\\\rVert\",\n    \"\\\\lgroup\", \"\\\\rgroup\", \"\\\\lmoustache\", \"\\\\rmoustache\",\n];\n\n// and delimiters that never stack\nvar stackNeverDelimiters = [\n    \"<\", \">\", \"\\\\langle\", \"\\\\rangle\", \"/\", \"\\\\backslash\", \"\\\\lt\", \"\\\\gt\",\n];\n\n// Metrics of the different sizes. Found by looking at TeX's output of\n// $\\bigl| // \\Bigl| \\biggl| \\Biggl| \\showlists$\n// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.\nvar sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];\n\n/**\n * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.\n */\nvar makeSizedDelim = function(delim, size, options, mode) {\n    // < and > turn into \\langle and \\rangle in delimiters\n    if (delim === \"<\" || delim === \"\\\\lt\") {\n        delim = \"\\\\langle\";\n    } else if (delim === \">\" || delim === \"\\\\gt\") {\n        delim = \"\\\\rangle\";\n    }\n\n    // Sized delimiters are never centered.\n    if (utils.contains(stackLargeDelimiters, delim) ||\n        utils.contains(stackNeverDelimiters, delim)) {\n        return makeLargeDelim(delim, size, false, options, mode);\n    } else if (utils.contains(stackAlwaysDelimiters, delim)) {\n        return makeStackedDelim(\n            delim, sizeToMaxHeight[size], false, options, mode);\n    } else {\n        throw new ParseError(\"Illegal delimiter: '\" + delim + \"'\");\n    }\n};\n\n/**\n * There are three different sequences of delimiter sizes that the delimiters\n * follow depending on the kind of delimiter. This is used when creating custom\n * sized delimiters to decide whether to create a small, large, or stacked\n * delimiter.\n *\n * In real TeX, these sequences aren't explicitly defined, but are instead\n * defined inside the font metrics. Since there are only three sequences that\n * are possible for the delimiters that TeX defines, it is easier to just encode\n * them explicitly here.\n */\n\n// Delimiters that never stack try small delimiters and large delimiters only\nvar stackNeverDelimiterSequence = [\n    {type: \"small\", style: Style.SCRIPTSCRIPT},\n    {type: \"small\", style: Style.SCRIPT},\n    {type: \"small\", style: Style.TEXT},\n    {type: \"large\", size: 1},\n    {type: \"large\", size: 2},\n    {type: \"large\", size: 3},\n    {type: \"large\", size: 4},\n];\n\n// Delimiters that always stack try the small delimiters first, then stack\nvar stackAlwaysDelimiterSequence = [\n    {type: \"small\", style: Style.SCRIPTSCRIPT},\n    {type: \"small\", style: Style.SCRIPT},\n    {type: \"small\", style: Style.TEXT},\n    {type: \"stack\"},\n];\n\n// Delimiters that stack when large try the small and then large delimiters, and\n// stack afterwards\nvar stackLargeDelimiterSequence = [\n    {type: \"small\", style: Style.SCRIPTSCRIPT},\n    {type: \"small\", style: Style.SCRIPT},\n    {type: \"small\", style: Style.TEXT},\n    {type: \"large\", size: 1},\n    {type: \"large\", size: 2},\n    {type: \"large\", size: 3},\n    {type: \"large\", size: 4},\n    {type: \"stack\"},\n];\n\n/**\n * Get the font used in a delimiter based on what kind of delimiter it is.\n */\nvar delimTypeToFont = function(type) {\n    if (type.type === \"small\") {\n        return \"Main-Regular\";\n    } else if (type.type === \"large\") {\n        return \"Size\" + type.size + \"-Regular\";\n    } else if (type.type === \"stack\") {\n        return \"Size4-Regular\";\n    }\n};\n\n/**\n * Traverse a sequence of types of delimiters to decide what kind of delimiter\n * should be used to create a delimiter of the given height+depth.\n */\nvar traverseSequence = function(delim, height, sequence, options) {\n    // Here, we choose the index we should start at in the sequences. In smaller\n    // sizes (which correspond to larger numbers in style.size) we start earlier\n    // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts\n    // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2\n    var start = Math.min(2, 3 - options.style.size);\n    for (var i = start; i < sequence.length; i++) {\n        if (sequence[i].type === \"stack\") {\n            // This is always the last delimiter, so we just break the loop now.\n            break;\n        }\n\n        var metrics = getMetrics(delim, delimTypeToFont(sequence[i]));\n        var heightDepth = metrics.height + metrics.depth;\n\n        // Small delimiters are scaled down versions of the same font, so we\n        // account for the style change size.\n\n        if (sequence[i].type === \"small\") {\n            heightDepth *= sequence[i].style.sizeMultiplier;\n        }\n\n        // Check if the delimiter at this size works for the given height.\n        if (heightDepth > height) {\n            return sequence[i];\n        }\n    }\n\n    // If we reached the end of the sequence, return the last sequence element.\n    return sequence[sequence.length - 1];\n};\n\n/**\n * Make a delimiter of a given height+depth, with optional centering. Here, we\n * traverse the sequences, and create a delimiter that the sequence tells us to.\n */\nvar makeCustomSizedDelim = function(delim, height, center, options, mode) {\n    if (delim === \"<\" || delim === \"\\\\lt\") {\n        delim = \"\\\\langle\";\n    } else if (delim === \">\" || delim === \"\\\\gt\") {\n        delim = \"\\\\rangle\";\n    }\n\n    // Decide what sequence to use\n    var sequence;\n    if (utils.contains(stackNeverDelimiters, delim)) {\n        sequence = stackNeverDelimiterSequence;\n    } else if (utils.contains(stackLargeDelimiters, delim)) {\n        sequence = stackLargeDelimiterSequence;\n    } else {\n        sequence = stackAlwaysDelimiterSequence;\n    }\n\n    // Look through the sequence\n    var delimType = traverseSequence(delim, height, sequence, options);\n\n    // Depending on the sequence element we decided on, call the appropriate\n    // function.\n    if (delimType.type === \"small\") {\n        return makeSmallDelim(delim, delimType.style, center, options, mode);\n    } else if (delimType.type === \"large\") {\n        return makeLargeDelim(delim, delimType.size, center, options, mode);\n    } else if (delimType.type === \"stack\") {\n        return makeStackedDelim(delim, height, center, options, mode);\n    }\n};\n\n/**\n * Make a delimiter for use with `\\left` and `\\right`, given a height and depth\n * of an expression that the delimiters surround.\n */\nvar makeLeftRightDelim = function(delim, height, depth, options, mode) {\n    // We always center \\left/\\right delimiters, so the axis is always shifted\n    var axisHeight =\n        fontMetrics.metrics.axisHeight * options.style.sizeMultiplier;\n\n    // Taken from TeX source, tex.web, function make_left_right\n    var delimiterFactor = 901;\n    var delimiterExtend = 5.0 / fontMetrics.metrics.ptPerEm;\n\n    var maxDistFromAxis = Math.max(\n        height - axisHeight, depth + axisHeight);\n\n    var totalHeight = Math.max(\n        // In real TeX, calculations are done using integral values which are\n        // 65536 per pt, or 655360 per em. So, the division here truncates in\n        // TeX but doesn't here, producing different results. If we wanted to\n        // exactly match TeX's calculation, we could do\n        //   Math.floor(655360 * maxDistFromAxis / 500) *\n        //    delimiterFactor / 655360\n        // (To see the difference, compare\n        //    x^{x^{\\left(\\rule{0.1em}{0.68em}\\right)}}\n        // in TeX and KaTeX)\n        maxDistFromAxis / 500 * delimiterFactor,\n        2 * maxDistFromAxis - delimiterExtend);\n\n    // Finally, we defer to `makeCustomSizedDelim` with our calculated total\n    // height\n    return makeCustomSizedDelim(delim, totalHeight, true, options, mode);\n};\n\nmodule.exports = {\n    sizedDelim: makeSizedDelim,\n    customSizedDelim: makeCustomSizedDelim,\n    leftRightDelim: makeLeftRightDelim,\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/katex/src/delimiter.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/katex/src/delimiter.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}}],"sources":{"../node_modules/katex/src/delimiter.js":"/**\n * This file deals with creating delimiters of various sizes. The TeXbook\n * discusses these routines on page 441-442, in the \"Another subroutine sets box\n * x to a specified variable delimiter\" paragraph.\n *\n * There are three main routines here. `makeSmallDelim` makes a delimiter in the\n * normal font, but in either text, script, or scriptscript style.\n * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,\n * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of\n * smaller pieces that are stacked on top of one another.\n *\n * The functions take a parameter `center`, which determines if the delimiter\n * should be centered around the axis.\n *\n * Then, there are three exposed functions. `sizedDelim` makes a delimiter in\n * one of the given sizes. This is used for things like `\\bigl`.\n * `customSizedDelim` makes a delimiter with a given total height+depth. It is\n * called in places like `\\sqrt`. `leftRightDelim` makes an appropriate\n * delimiter which surrounds an expression of a given height an depth. It is\n * used in `\\left` and `\\right`.\n */\n\nvar ParseError = require(\"./ParseError\");\nvar Style = require(\"./Style\");\n\nvar buildCommon = require(\"./buildCommon\");\nvar fontMetrics = require(\"./fontMetrics\");\nvar symbols = require(\"./symbols\");\nvar utils = require(\"./utils\");\n\nvar makeSpan = buildCommon.makeSpan;\n\n/**\n * Get the metrics for a given symbol and font, after transformation (i.e.\n * after following replacement from symbols.js)\n */\nvar getMetrics = function(symbol, font) {\n    if (symbols.math[symbol] && symbols.math[symbol].replace) {\n        return fontMetrics.getCharacterMetrics(\n            symbols.math[symbol].replace, font);\n    } else {\n        return fontMetrics.getCharacterMetrics(\n            symbol, font);\n    }\n};\n\n/**\n * Builds a symbol in the given font size (note size is an integer)\n */\nvar mathrmSize = function(value, size, mode) {\n    return buildCommon.makeSymbol(value, \"Size\" + size + \"-Regular\", mode);\n};\n\n/**\n * Puts a delimiter span in a given style, and adds appropriate height, depth,\n * and maxFontSizes.\n */\nvar styleWrap = function(delim, toStyle, options) {\n    var span = makeSpan(\n        [\"style-wrap\", options.style.reset(), toStyle.cls()], [delim]);\n\n    var multiplier = toStyle.sizeMultiplier / options.style.sizeMultiplier;\n\n    span.height *= multiplier;\n    span.depth *= multiplier;\n    span.maxFontSize = toStyle.sizeMultiplier;\n\n    return span;\n};\n\n/**\n * Makes a small delimiter. This is a delimiter that comes in the Main-Regular\n * font, but is restyled to either be in textstyle, scriptstyle, or\n * scriptscriptstyle.\n */\nvar makeSmallDelim = function(delim, style, center, options, mode) {\n    var text = buildCommon.makeSymbol(delim, \"Main-Regular\", mode);\n\n    var span = styleWrap(text, style, options);\n\n    if (center) {\n        var shift =\n            (1 - options.style.sizeMultiplier / style.sizeMultiplier) *\n            fontMetrics.metrics.axisHeight;\n\n        span.style.top = shift + \"em\";\n        span.height -= shift;\n        span.depth += shift;\n    }\n\n    return span;\n};\n\n/**\n * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,\n * Size3, or Size4 fonts. It is always rendered in textstyle.\n */\nvar makeLargeDelim = function(delim, size, center, options, mode) {\n    var inner = mathrmSize(delim, size, mode);\n\n    var span = styleWrap(\n        makeSpan([\"delimsizing\", \"size\" + size],\n                 [inner], options.getColor()),\n        Style.TEXT, options);\n\n    if (center) {\n        var shift = (1 - options.style.sizeMultiplier) *\n            fontMetrics.metrics.axisHeight;\n\n        span.style.top = shift + \"em\";\n        span.height -= shift;\n        span.depth += shift;\n    }\n\n    return span;\n};\n\n/**\n * Make an inner span with the given offset and in the given font. This is used\n * in `makeStackedDelim` to make the stacking pieces for the delimiter.\n */\nvar makeInner = function(symbol, font, mode) {\n    var sizeClass;\n    // Apply the correct CSS class to choose the right font.\n    if (font === \"Size1-Regular\") {\n        sizeClass = \"delim-size1\";\n    } else if (font === \"Size4-Regular\") {\n        sizeClass = \"delim-size4\";\n    }\n\n    var inner = makeSpan(\n        [\"delimsizinginner\", sizeClass],\n        [makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]);\n\n    // Since this will be passed into `makeVList` in the end, wrap the element\n    // in the appropriate tag that VList uses.\n    return {type: \"elem\", elem: inner};\n};\n\n/**\n * Make a stacked delimiter out of a given delimiter, with the total height at\n * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.\n */\nvar makeStackedDelim = function(delim, heightTotal, center, options, mode) {\n    // There are four parts, the top, an optional middle, a repeated part, and a\n    // bottom.\n    var top;\n    var middle;\n    var repeat;\n    var bottom;\n    top = repeat = bottom = delim;\n    middle = null;\n    // Also keep track of what font the delimiters are in\n    var font = \"Size1-Regular\";\n\n    // We set the parts and font based on the symbol. Note that we use\n    // '\\u23d0' instead of '|' and '\\u2016' instead of '\\\\|' for the\n    // repeats of the arrows\n    if (delim === \"\\\\uparrow\") {\n        repeat = bottom = \"\\u23d0\";\n    } else if (delim === \"\\\\Uparrow\") {\n        repeat = bottom = \"\\u2016\";\n    } else if (delim === \"\\\\downarrow\") {\n        top = repeat = \"\\u23d0\";\n    } else if (delim === \"\\\\Downarrow\") {\n        top = repeat = \"\\u2016\";\n    } else if (delim === \"\\\\updownarrow\") {\n        top = \"\\\\uparrow\";\n        repeat = \"\\u23d0\";\n        bottom = \"\\\\downarrow\";\n    } else if (delim === \"\\\\Updownarrow\") {\n        top = \"\\\\Uparrow\";\n        repeat = \"\\u2016\";\n        bottom = \"\\\\Downarrow\";\n    } else if (delim === \"[\" || delim === \"\\\\lbrack\") {\n        top = \"\\u23a1\";\n        repeat = \"\\u23a2\";\n        bottom = \"\\u23a3\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"]\" || delim === \"\\\\rbrack\") {\n        top = \"\\u23a4\";\n        repeat = \"\\u23a5\";\n        bottom = \"\\u23a6\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lfloor\") {\n        repeat = top = \"\\u23a2\";\n        bottom = \"\\u23a3\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lceil\") {\n        top = \"\\u23a1\";\n        repeat = bottom = \"\\u23a2\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rfloor\") {\n        repeat = top = \"\\u23a5\";\n        bottom = \"\\u23a6\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rceil\") {\n        top = \"\\u23a4\";\n        repeat = bottom = \"\\u23a5\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"(\") {\n        top = \"\\u239b\";\n        repeat = \"\\u239c\";\n        bottom = \"\\u239d\";\n        font = \"Size4-Regular\";\n    } else if (delim === \")\") {\n        top = \"\\u239e\";\n        repeat = \"\\u239f\";\n        bottom = \"\\u23a0\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\{\" || delim === \"\\\\lbrace\") {\n        top = \"\\u23a7\";\n        middle = \"\\u23a8\";\n        bottom = \"\\u23a9\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\}\" || delim === \"\\\\rbrace\") {\n        top = \"\\u23ab\";\n        middle = \"\\u23ac\";\n        bottom = \"\\u23ad\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lgroup\") {\n        top = \"\\u23a7\";\n        bottom = \"\\u23a9\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rgroup\") {\n        top = \"\\u23ab\";\n        bottom = \"\\u23ad\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\lmoustache\") {\n        top = \"\\u23a7\";\n        bottom = \"\\u23ad\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\rmoustache\") {\n        top = \"\\u23ab\";\n        bottom = \"\\u23a9\";\n        repeat = \"\\u23aa\";\n        font = \"Size4-Regular\";\n    } else if (delim === \"\\\\surd\") {\n        top = \"\\ue001\";\n        bottom = \"\\u23b7\";\n        repeat = \"\\ue000\";\n        font = \"Size4-Regular\";\n    }\n\n    // Get the metrics of the four sections\n    var topMetrics = getMetrics(top, font);\n    var topHeightTotal = topMetrics.height + topMetrics.depth;\n    var repeatMetrics = getMetrics(repeat, font);\n    var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;\n    var bottomMetrics = getMetrics(bottom, font);\n    var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;\n    var middleHeightTotal = 0;\n    var middleFactor = 1;\n    if (middle !== null) {\n        var middleMetrics = getMetrics(middle, font);\n        middleHeightTotal = middleMetrics.height + middleMetrics.depth;\n        middleFactor = 2; // repeat symmetrically above and below middle\n    }\n\n    // Calcuate the minimal height that the delimiter can have.\n    // It is at least the size of the top, bottom, and optional middle combined.\n    var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;\n\n    // Compute the number of copies of the repeat symbol we will need\n    var repeatCount = Math.ceil(\n        (heightTotal - minHeight) / (middleFactor * repeatHeightTotal));\n\n    // Compute the total height of the delimiter including all the symbols\n    var realHeightTotal =\n        minHeight + repeatCount * middleFactor * repeatHeightTotal;\n\n    // The center of the delimiter is placed at the center of the axis. Note\n    // that in this context, \"center\" means that the delimiter should be\n    // centered around the axis in the current style, while normally it is\n    // centered around the axis in textstyle.\n    var axisHeight = fontMetrics.metrics.axisHeight;\n    if (center) {\n        axisHeight *= options.style.sizeMultiplier;\n    }\n    // Calculate the depth\n    var depth = realHeightTotal / 2 - axisHeight;\n\n    // Now, we start building the pieces that will go into the vlist\n\n    // Keep a list of the inner pieces\n    var inners = [];\n\n    // Add the bottom symbol\n    inners.push(makeInner(bottom, font, mode));\n\n    var i;\n    if (middle === null) {\n        // Add that many symbols\n        for (i = 0; i < repeatCount; i++) {\n            inners.push(makeInner(repeat, font, mode));\n        }\n    } else {\n        // When there is a middle bit, we need the middle part and two repeated\n        // sections\n        for (i = 0; i < repeatCount; i++) {\n            inners.push(makeInner(repeat, font, mode));\n        }\n        inners.push(makeInner(middle, font, mode));\n        for (i = 0; i < repeatCount; i++) {\n            inners.push(makeInner(repeat, font, mode));\n        }\n    }\n\n    // Add the top symbol\n    inners.push(makeInner(top, font, mode));\n\n    // Finally, build the vlist\n    var inner = buildCommon.makeVList(inners, \"bottom\", depth, options);\n\n    return styleWrap(\n        makeSpan([\"delimsizing\", \"mult\"], [inner], options.getColor()),\n        Style.TEXT, options);\n};\n\n// There are three kinds of delimiters, delimiters that stack when they become\n// too large\nvar stackLargeDelimiters = [\n    \"(\", \")\", \"[\", \"\\\\lbrack\", \"]\", \"\\\\rbrack\",\n    \"\\\\{\", \"\\\\lbrace\", \"\\\\}\", \"\\\\rbrace\",\n    \"\\\\lfloor\", \"\\\\rfloor\", \"\\\\lceil\", \"\\\\rceil\",\n    \"\\\\surd\",\n];\n\n// delimiters that always stack\nvar stackAlwaysDelimiters = [\n    \"\\\\uparrow\", \"\\\\downarrow\", \"\\\\updownarrow\",\n    \"\\\\Uparrow\", \"\\\\Downarrow\", \"\\\\Updownarrow\",\n    \"|\", \"\\\\|\", \"\\\\vert\", \"\\\\Vert\",\n    \"\\\\lvert\", \"\\\\rvert\", \"\\\\lVert\", \"\\\\rVert\",\n    \"\\\\lgroup\", \"\\\\rgroup\", \"\\\\lmoustache\", \"\\\\rmoustache\",\n];\n\n// and delimiters that never stack\nvar stackNeverDelimiters = [\n    \"<\", \">\", \"\\\\langle\", \"\\\\rangle\", \"/\", \"\\\\backslash\", \"\\\\lt\", \"\\\\gt\",\n];\n\n// Metrics of the different sizes. Found by looking at TeX's output of\n// $\\bigl| // \\Bigl| \\biggl| \\Biggl| \\showlists$\n// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.\nvar sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];\n\n/**\n * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.\n */\nvar makeSizedDelim = function(delim, size, options, mode) {\n    // < and > turn into \\langle and \\rangle in delimiters\n    if (delim === \"<\" || delim === \"\\\\lt\") {\n        delim = \"\\\\langle\";\n    } else if (delim === \">\" || delim === \"\\\\gt\") {\n        delim = \"\\\\rangle\";\n    }\n\n    // Sized delimiters are never centered.\n    if (utils.contains(stackLargeDelimiters, delim) ||\n        utils.contains(stackNeverDelimiters, delim)) {\n        return makeLargeDelim(delim, size, false, options, mode);\n    } else if (utils.contains(stackAlwaysDelimiters, delim)) {\n        return makeStackedDelim(\n            delim, sizeToMaxHeight[size], false, options, mode);\n    } else {\n        throw new ParseError(\"Illegal delimiter: '\" + delim + \"'\");\n    }\n};\n\n/**\n * There are three different sequences of delimiter sizes that the delimiters\n * follow depending on the kind of delimiter. This is used when creating custom\n * sized delimiters to decide whether to create a small, large, or stacked\n * delimiter.\n *\n * In real TeX, these sequences aren't explicitly defined, but are instead\n * defined inside the font metrics. Since there are only three sequences that\n * are possible for the delimiters that TeX defines, it is easier to just encode\n * them explicitly here.\n */\n\n// Delimiters that never stack try small delimiters and large delimiters only\nvar stackNeverDelimiterSequence = [\n    {type: \"small\", style: Style.SCRIPTSCRIPT},\n    {type: \"small\", style: Style.SCRIPT},\n    {type: \"small\", style: Style.TEXT},\n    {type: \"large\", size: 1},\n    {type: \"large\", size: 2},\n    {type: \"large\", size: 3},\n    {type: \"large\", size: 4},\n];\n\n// Delimiters that always stack try the small delimiters first, then stack\nvar stackAlwaysDelimiterSequence = [\n    {type: \"small\", style: Style.SCRIPTSCRIPT},\n    {type: \"small\", style: Style.SCRIPT},\n    {type: \"small\", style: Style.TEXT},\n    {type: \"stack\"},\n];\n\n// Delimiters that stack when large try the small and then large delimiters, and\n// stack afterwards\nvar stackLargeDelimiterSequence = [\n    {type: \"small\", style: Style.SCRIPTSCRIPT},\n    {type: \"small\", style: Style.SCRIPT},\n    {type: \"small\", style: Style.TEXT},\n    {type: \"large\", size: 1},\n    {type: \"large\", size: 2},\n    {type: \"large\", size: 3},\n    {type: \"large\", size: 4},\n    {type: \"stack\"},\n];\n\n/**\n * Get the font used in a delimiter based on what kind of delimiter it is.\n */\nvar delimTypeToFont = function(type) {\n    if (type.type === \"small\") {\n        return \"Main-Regular\";\n    } else if (type.type === \"large\") {\n        return \"Size\" + type.size + \"-Regular\";\n    } else if (type.type === \"stack\") {\n        return \"Size4-Regular\";\n    }\n};\n\n/**\n * Traverse a sequence of types of delimiters to decide what kind of delimiter\n * should be used to create a delimiter of the given height+depth.\n */\nvar traverseSequence = function(delim, height, sequence, options) {\n    // Here, we choose the index we should start at in the sequences. In smaller\n    // sizes (which correspond to larger numbers in style.size) we start earlier\n    // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts\n    // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2\n    var start = Math.min(2, 3 - options.style.size);\n    for (var i = start; i < sequence.length; i++) {\n        if (sequence[i].type === \"stack\") {\n            // This is always the last delimiter, so we just break the loop now.\n            break;\n        }\n\n        var metrics = getMetrics(delim, delimTypeToFont(sequence[i]));\n        var heightDepth = metrics.height + metrics.depth;\n\n        // Small delimiters are scaled down versions of the same font, so we\n        // account for the style change size.\n\n        if (sequence[i].type === \"small\") {\n            heightDepth *= sequence[i].style.sizeMultiplier;\n        }\n\n        // Check if the delimiter at this size works for the given height.\n        if (heightDepth > height) {\n            return sequence[i];\n        }\n    }\n\n    // If we reached the end of the sequence, return the last sequence element.\n    return sequence[sequence.length - 1];\n};\n\n/**\n * Make a delimiter of a given height+depth, with optional centering. Here, we\n * traverse the sequences, and create a delimiter that the sequence tells us to.\n */\nvar makeCustomSizedDelim = function(delim, height, center, options, mode) {\n    if (delim === \"<\" || delim === \"\\\\lt\") {\n        delim = \"\\\\langle\";\n    } else if (delim === \">\" || delim === \"\\\\gt\") {\n        delim = \"\\\\rangle\";\n    }\n\n    // Decide what sequence to use\n    var sequence;\n    if (utils.contains(stackNeverDelimiters, delim)) {\n        sequence = stackNeverDelimiterSequence;\n    } else if (utils.contains(stackLargeDelimiters, delim)) {\n        sequence = stackLargeDelimiterSequence;\n    } else {\n        sequence = stackAlwaysDelimiterSequence;\n    }\n\n    // Look through the sequence\n    var delimType = traverseSequence(delim, height, sequence, options);\n\n    // Depending on the sequence element we decided on, call the appropriate\n    // function.\n    if (delimType.type === \"small\") {\n        return makeSmallDelim(delim, delimType.style, center, options, mode);\n    } else if (delimType.type === \"large\") {\n        return makeLargeDelim(delim, delimType.size, center, options, mode);\n    } else if (delimType.type === \"stack\") {\n        return makeStackedDelim(delim, height, center, options, mode);\n    }\n};\n\n/**\n * Make a delimiter for use with `\\left` and `\\right`, given a height and depth\n * of an expression that the delimiters surround.\n */\nvar makeLeftRightDelim = function(delim, height, depth, options, mode) {\n    // We always center \\left/\\right delimiters, so the axis is always shifted\n    var axisHeight =\n        fontMetrics.metrics.axisHeight * options.style.sizeMultiplier;\n\n    // Taken from TeX source, tex.web, function make_left_right\n    var delimiterFactor = 901;\n    var delimiterExtend = 5.0 / fontMetrics.metrics.ptPerEm;\n\n    var maxDistFromAxis = Math.max(\n        height - axisHeight, depth + axisHeight);\n\n    var totalHeight = Math.max(\n        // In real TeX, calculations are done using integral values which are\n        // 65536 per pt, or 655360 per em. So, the division here truncates in\n        // TeX but doesn't here, producing different results. If we wanted to\n        // exactly match TeX's calculation, we could do\n        //   Math.floor(655360 * maxDistFromAxis / 500) *\n        //    delimiterFactor / 655360\n        // (To see the difference, compare\n        //    x^{x^{\\left(\\rule{0.1em}{0.68em}\\right)}}\n        // in TeX and KaTeX)\n        maxDistFromAxis / 500 * delimiterFactor,\n        2 * maxDistFromAxis - delimiterExtend);\n\n    // Finally, we defer to `makeCustomSizedDelim` with our calculated total\n    // height\n    return makeCustomSizedDelim(delim, totalHeight, true, options, mode);\n};\n\nmodule.exports = {\n    sizedDelim: makeSizedDelim,\n    customSizedDelim: makeCustomSizedDelim,\n    leftRightDelim: makeLeftRightDelim,\n};\n"},"lineCount":543}},"error":null,"hash":"ea5de8b18824a6697a63bc41ed1fdc11","cacheData":{"env":{}}}